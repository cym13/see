#!/bin/bash
set -u

#######################################
# Configuration
#######################################

# What video player do you want to use?
PLAYER=mpv
PLAYER_FLAGS=''

# What format will be recognized as possible embeded videos
FORMATS="youtube.com \.mp4 \.avi \.webm \.ogv rtmp:// \.mp3 \.ogm \.flac \
         \.mkv \.m3u8 magnet: youtu.be"

# Should we launch some tests?
DEBUG=false

# Torrent player command
P2PLAYER="peerflix -k"

#######################################
# Extensions
#######################################
# Used to perform domain specific actions, just define a function whose name
# is the target domain and it will be executed with maximum priority.

www.dailymotion.com() {
    get_videos "$1"           \
    | grep ".*\.mp4?"         \
    | tail -1                 \
    | sed 's/\\//g'           \
    | xargs wget --quiet -O-  \
    | "$PLAYER" $PLAYER_FLAGS -
}

www.youtube.com() {
    "$PLAYER" $PLAYER_FLAGS                                  \
              --ytdl-format='[protocol!=http_dash_segments]' \
              "$1"
}

youtu.be() {
    return www.youtube.com "$1"
}

www.anime1.com() {
    curl -s "$1"    \
    | tr '"' '\n'   \
    | grep "\.mp4?" \
    | tr '\n' '\0'  \
    | xargs -0 "$PLAYER" $PLAYER_FLAGS
}

livecoding.tv() {
    curl -s "$1"   \
    | tr '"' '\n'  \
    | grep -a rtmp \
    | xargs "$PLAYER" $PLAYER_FLAGS
}

kat.cr() {
    curl -s --compressed "$1" \
    | tr '"' '\n'             \
    | grep -a "^magnet:"      \
    | head -1                 \
    | xargs $P2PLAYER
}

hentaistream.com() {
    curl -s "$1"              \
    | qgrep "^http.*/frames/" \
    | xargs curl -s           \
    | qgrep "\(mp4\|avi\)$"   \
    | xargs $PLAYER $PLAYER_FLAGS
}

#######################################
# Internals
#######################################

domain() {
    sed -n '\|http|s|^https\?://\([^/]\+\)/.*$|\1|p' <<< "$1"
}

scheme() {
    sed -n "\|://|s|^\([^:]\+\)://.*$|\1|p" <<< "$1"
}

get_videos() {
    content="$(curl --compressed -L -s "$1")"

    for format in $FORMATS ; do
        echo "$content"   \
        | tr "'\"" "\n\n" \
        | grep -a -e "${format}[^\.]" -e "${format}$" \
        | sed 's|\\/|/|g'
    done
}

normalize_url() {
    sed "\|^[^/:][^:]\+$|s|^|/| ; \|^/|s|^|$(scheme "$1")://$(domain "$1")|"
}

not_url() {
    if [[ -z "$(scheme "$1")" ]] ; then
        # Maybe it's a magnet link?
        $P2PLAYER "$1"
        return 0
    fi
    return 1
}

torrent() {
    if grep -q ".torrent$" <<< "$1" ; then
        f="$(mktemp)"
        wget "$1" -O "$f"
        $P2PLAYER "$f"
        rm -f "$f"
        return 0
    fi
    return 1
}

qgrep() {
    tr \'\" "\n\n" | grep "$@"
}

# Some debug tests, not exactly unittests but useful for debugging
tests() {
scheme "http://home/cym13/.home.html/"
domain "http://home/cym13/.home.html/"

normalize_url "http://my_site.com/thingy/" <<EOF
/a/video.mp4
video.mp4
http://my_site.com/a/video.mp4
EOF

}

main() {
    if $DEBUG ; then
        tests
    fi

    # No arguments given
    if [[ "$#" -eq 0 ]] ; then
        echo "Usage: see URLS..."
        exit 1
    fi

    if [[ "$1" = "-f" ]] ; then
        PLAYER_FLAGS="$PLAYER_FLAGS --fullscreen"
        shift
    fi

    for _ in `seq $#` ; do
        local url="$1"

        if "$(domain "$url")" "$url" 2>/dev/null \
        || torrent   "$url"                      \
        || "$PLAYER" $PLAYER_FLAGS "$url"        \
        || not_url   "$url"
        then
            shift
            continue
        fi

        # Try automatically finding embeded urls
        local urls="$(get_videos "$url")"

        if [[ -z "$urls" ]] ; then
            shift
            continue
        fi

        uniq <<<"$urls"         \
        | normalize_url "$url" \
        | tr "\n" "\0"         \
        | xargs -0 "$PLAYER" $PLAYER_FLAGS

        shift
    done
}

main "$@"
